// Code generated by go-bindata.
// sources:
// templates/availability.html
// templates/episode.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _availabilityHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x2c\x4b\xcc\xcc\x49\x4c\xca\xcc\xc9\x2c\xa9\x54\x52\xa8\xad\xe5\xb2\x49\xc9\x2c\x53\x48\xce\x49\x2c\x2e\xb6\x45\x95\xb4\xe3\x52\x00\x02\x5f\x4f\xf7\x50\x57\x1f\x2e\x1b\x7d\xa0\x32\x3b\xae\xea\x6a\xfd\xd4\xbc\x14\xa0\x2e\x40\x00\x00\x00\xff\xff\x8f\xeb\x96\xb4\x51\x00\x00\x00")

func availabilityHtmlBytes() ([]byte, error) {
	return bindataRead(
		_availabilityHtml,
		"availability.html",
	)
}

func availabilityHtml() (*asset, error) {
	bytes, err := availabilityHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "availability.html", size: 81, mode: os.FileMode(420), modTime: time.Unix(1454074407, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _episodeHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\xcb\x6e\xdb\x30\x10\xbc\xe7\x2b\x08\xde\x25\xff\x80\xed\x43\xd1\x1e\x02\x24\x45\xd1\x04\xbd\xaf\xac\x8d\xb2\x28\x49\x11\x5c\xda\x80\x21\xf8\xdf\x4b\x52\xa6\x4d\x5b\x12\x9a\x43\x50\x54\x07\x81\x8f\x99\xd9\xdd\xd1\x40\x6b\x10\xef\x0e\xdf\x36\x72\x65\x5d\xdf\x39\xd0\x1a\x79\x35\x0c\xf5\xe3\xd7\xd3\x49\x0a\x4f\x5e\xe1\x46\x86\xfd\x6b\x5c\xc5\xa3\x9d\x02\xe6\x8d\x54\xc4\xbe\x22\x8f\xba\x52\x64\x7e\x0b\xf6\xe0\xa5\xd8\x3e\x88\xf0\x0c\x03\xbd\x89\xfa\xfb\x5e\x37\xe8\x4e\xa7\x74\x14\x9f\x75\x4b\x87\xcc\x36\xe9\x52\x0a\x70\x04\xd5\x3b\xb5\x2d\x9a\x8d\xf4\x6e\x8f\x72\x1b\x6a\x65\xea\x7a\x15\x28\x59\x13\x4d\x7b\x16\x2b\x85\x52\x83\xc2\xf7\xb6\x4a\xab\x44\x3f\xb7\x5a\xb0\x4b\x86\x75\xa4\xc1\x1d\xe5\xf6\xda\x18\xe9\x4e\xb0\xdb\xa5\x39\x1f\x35\x74\x71\xce\xd5\x76\xb6\xf1\xfe\x80\x4e\x41\x60\x17\xea\x93\x0a\x01\x50\xd1\xae\x37\x01\x45\x33\x23\x66\x5c\x84\x08\x7f\xa0\x88\x47\x37\xdd\x55\xe7\x75\x2c\x46\xb9\xe0\xcf\xd7\x1f\x4f\xe5\x64\xf3\x43\x32\x06\x7e\x7b\x37\xe6\xbd\x6d\x4b\x66\x8d\xcb\xf5\x0a\xc2\xeb\x13\xd3\xf1\x3f\x86\xe3\x23\xe9\x28\x6e\x5d\x45\x31\x1e\xc5\xed\x25\x3f\xf9\x9b\xea\x4e\x4e\xb2\x24\x40\xf9\x5b\x9b\xca\x74\x2d\x07\x69\x29\x6c\xa3\x87\x4f\xd0\xa0\xe2\xc2\xc3\x49\x08\xa8\x33\xb6\x67\x2f\xb0\x25\xdf\x07\x33\x55\x72\x60\xe4\xd5\xdf\xf2\xe1\x8d\x95\xf7\x76\xfe\xd3\x6c\x17\x76\x7c\x6a\xa2\xaf\x9e\xbd\xec\x1b\x3f\x5e\x2f\xbb\x76\x86\x24\xad\x2b\xfe\x6f\x1e\xd9\x0b\xff\x68\x7a\xcb\xc4\x23\x3f\x6d\x90\xeb\xe7\xf0\x0d\xf6\x3a\xca\xd8\xa2\x7f\x7b\x1b\xa4\xb1\xc7\x67\x60\x8f\xee\x8b\x83\x9b\x02\x17\x0e\x5b\x30\xb9\x96\x4e\xd0\xaa\x89\xd8\xbb\x50\xce\xe2\x59\x83\x1a\x43\x50\x14\x19\x0d\xe3\xfa\x25\x5e\xc6\x0e\x23\xe3\x03\x62\x3a\x8d\xb4\xa4\x76\x1d\x78\x5e\x6e\xee\x7c\x62\x6a\x36\xab\x0c\xc5\x30\x88\xf0\x5f\x09\xe9\xf1\x28\x24\x1c\x80\x14\x34\xa4\xc8\x1f\xa5\xa8\x7f\xa1\x63\xea\x0d\x8b\x20\x92\xfe\x5f\x0f\x7f\x02\x00\x00\xff\xff\xf6\x00\xfc\x62\xdf\x06\x00\x00")

func episodeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_episodeHtml,
		"episode.html",
	)
}

func episodeHtml() (*asset, error) {
	bytes, err := episodeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "episode.html", size: 1759, mode: os.FileMode(420), modTime: time.Unix(1454074214, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"availability.html": availabilityHtml,
	"episode.html": episodeHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"availability.html": &bintree{availabilityHtml, map[string]*bintree{}},
	"episode.html": &bintree{episodeHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

